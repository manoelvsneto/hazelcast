# Azure DevOps Pipeline para Hazelcast Client no MicroK8s
# Pipeline para build e deploy apenas do cliente Hazelcast
pool:
  name: Arm64
  vmImage: 'ubuntu-22.04'

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/*
      - pom.xml
      - Dockerfile*
      - k8s/*

variables:
  # Configurações básicas
  mavenPomFile: 'pom.xml'
  javaVersion: '11'
  
  # Configurações do Docker - CONFIGURE ESTAS VARIÁVEIS
  dockerRegistryServiceConnection: 'DockerConnection'  # Nome da service connection no Azure DevOps
  imageRepository: 'manoelvsneto/hazelcast-client'
  containerRegistry: 'DockerConnection'           # Substitua pelo seu ACR
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.arm64'
  tag: '$(Build.BuildId)'
  
  # Configurações do Kubernetes - CONFIGURE ESTAS VARIÁVEIS  
  kubernetesServiceConnection: 'K8SOracleCloud'   # Nome da service connection no Azure DevOps
  namespace: 'hazelcast'

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: BuildJob
    displayName: 'Build and Test'
    pool:
      name: Arm64
      vmImage: 'ubuntu-22.04'
    
    steps:
    - task: JavaToolInstaller@0
      displayName: 'Install Java $(javaVersion)'
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - script: |
        mvn clean compile
      displayName: 'Maven Compile'
    
    - script: |
        mvn test
      displayName: 'Run Tests'
    
    - script: |
        mvn package -DskipTests
      displayName: 'Package Application'
    
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mergeTestResults: true
    
    - task: CopyFiles@2
      displayName: 'Copy Artifacts'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          target/*.jar
          k8s/**
          Dockerfile*
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Docker
  displayName: 'Build Docker Image'
  dependsOn: Build
  jobs:
  - job: DockerJob
    displayName: 'Docker Build and Push'
    pool:
      name: Arm64
      vmImage: 'ubuntu-22.04'
    
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Artifacts'
      inputs:
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(System.ArtifactsDirectory)/drop/Dockerfile.arm64'
        buildContext: '$(System.ArtifactsDirectory)/drop'
        tags: |
          $(tag)
          latest
        arguments: '--platform linux/arm64'

- stage: Deploy
  displayName: 'Deploy to MicroK8s'
  dependsOn: Docker
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to Kubernetes'
    pool:
      name: Arm64
      vmImage: 'ubuntu-22.04'
    environment: 'microk8s-cluster'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Artifacts'
            inputs:
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - script: |
              # Substituir placeholders nos manifestos
              sed -i "s|localhost:32000/hazelcast-client:latest|$(containerRegistry)/$(imageRepository):$(tag)|g" $(System.ArtifactsDirectory)/drop/k8s/hazelcast-client-deployment.yaml
              cat $(System.ArtifactsDirectory)/drop/k8s/hazelcast-client-deployment.yaml
            displayName: 'Update Manifest with New Image'
          
          - task: Kubernetes@1
            displayName: 'Deploy Hazelcast Client'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              command: 'apply'
              arguments: '-f $(System.ArtifactsDirectory)/drop/k8s/hazelcast-client-deployment.yaml'
          
          - script: |
              echo "Aguardando deployment..."
              kubectl wait --for=condition=available --timeout=300s deployment/hazelcast-client -n $(namespace)
              echo "Verificando status do deployment:"
              kubectl get pods -n $(namespace) -l app=hazelcast-client
              kubectl get deployment hazelcast-client -n $(namespace)
            displayName: 'Verify Deployment'
